<?xml version="1.0"?>
<psalm
    errorLevel="3"
    resolveFromConfigFile="true"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="https://getpsalm.org/schema/config"
    xsi:schemaLocation="https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd"
    findUnusedBaselineEntry="true"
    findUnusedCode="true"
    phpVersion="8.1"
>
    <projectFiles>
        <directory name="src" />
        <directory name="tests" />
    </projectFiles>

    <issueHandlers>
        <!-- LEVEL 8 -->
        <UnnecessaryVarAnnotation errorLevel="suppress" /> <!-- ПСАЛМу не нравится, когда через `@var` определен тип переменных в функциях, если этот тип "очевиден" -->
        <UnusedClass errorLevel="suppress" /> <!-- Это пакет-библиотека, все классы могут не использоваться -->
        <PossiblyUnusedProperty errorLevel="suppress" /> <!-- Это пакет-библиотека, свойства могут не читаться -->
        <PossiblyUnusedMethod errorLevel="suppress" /> <!-- Это пакет-библиотека, методы могут нигде не вызываться -->
        <PossiblyUnusedReturnValue errorLevel="suppress" /> <!-- Это нормально, если результат работы функции не нужен -->
        <UnusedReturnValue errorLevel="suppress" /> <!-- Это нормально, если результат работы функции не нужен -->
        <UnusedForeachValue errorLevel="suppress" /> <!-- При переборе действительно не всегда нужно значение, иногда нужен только ключ -->
        <MissingTemplateParam errorLevel="suppress" /> <!-- Базовые интерфейсы реально иногда нужно имплементировать, с нарушением правил наследования типизации -->
        <MissingOverrideAttribute errorLevel="suppress" /> <!-- Проверяет, подтвердили ли вы с помощью #[\Override], что действительно хотели переопределить метод - да блин, что за детский сад! -->
        <UndefinedDocblockClass errorLevel="suppress" /> <!-- В некоторые докблоки добавлено указание на возможность выбрасывания интерфейсов, которые появятся только в будущих версиях PHP (@todo PHP8.3 проверить актуальность) -->
        <InvalidParamDefault errorLevel="suppress" /> <!-- Не даст аргументам функции class-string присвоить пустую строку, заставляя расширять типизацию - т.е. делая лучше, сделаем хуже -->
        <!-- LEVEL 7 -->
        <!-- LEVEL 6 -->
        <UndefinedThisPropertyFetch errorLevel="suppress" /> <!-- К сожалению в свете "запрета" в PHP8.2 динамических свойств, ПСАЛМ стал сходить с ума от них, конкретное место не мьютится, если подряд идут несколько "динамических" свойств, часто динамическими свойствами он считает свойства, которые просто не видит, так как обращение к ним идет в анонимных функциях -->
        <UndefinedPropertyFetch errorLevel="suppress" /> <!-- К сожалению в свете "запрета" в PHP8.2 динамических свойств, ПСАЛМ стал сходить с ума от них, конкретное место не мьютится, если подряд идут несколько "динамических" свойств, часто динамическими свойствами он считает свойства, которые просто не видит, так как обращение к ним идет в анонимных функциях -->
        <!-- LEVEL 5 -->
        <FalsableReturnStatement errorLevel="suppress" /> <!-- Многие функции PHP могут вернуть результат в разных типах данных, использование ответа без явного преобразования смущает Пслам -->
        <!-- LEVEL 4 -->
        <!-- LEVEL 3 -->
        <ArgumentTypeCoercion errorLevel="suppress" /> <!-- К сожалению, ПСАЛМ типизировал встроенные в PHP функции до такой паранои, что пользоваться этой проверкой просто невозможно, например, для некоторых INT значений указанны даже возможные варианты значений, а list{object, string} не удовлетворяет тому, что должно быть в callable, так как допускает пустую строку -->
        <PossiblyNullArgument errorLevel="suppress" /> <!-- Очень многие PHP функции могут вернуть NULL, при этом на практике это невозможно, если при реальном использовании мы будем при этом падать - это будет очень даже хорошо -->
        <PossiblyFalseIterator errorLevel="suppress" /> <!-- Очень многие PHP функции могут вернуть FALSE, при этом на практике это невозможно, если при реальном использовании мы будем при этом падать - это будет очень даже хорошо -->
        <PossiblyFalseArgument errorLevel="suppress" /> <!-- Очень многие PHP функции могут вернуть FALSE, при этом на практике это невозможно, если при реальном использовании мы будем при этом падать - это будет очень даже хорошо -->
        <PossiblyFalseOperand errorLevel="suppress" /> <!-- Очень многие PHP функции могут вернуть FALSE, при этом на практике это невозможно, если при реальном использовании мы будем при этом падать - это будет очень даже хорошо -->
        <!-- LEVEL 2 -->
        <UnsupportedReferenceUsage errorLevel="suppress" /> <!-- Работа с ссылками на таком уровне нужно при проведении тестов (вне тестов, это использовать как-то странно))) -->
        <PropertyNotSetInConstructor errorLevel="suppress" /> <!-- Инициализация свойств по мере надобности - это очень удобно (не нужно создавать nullable переменные) -->
        <RiskyTruthyFalsyComparison errorLevel="suppress" /> <!-- Создает больше проблем, чем пользы, так как зачастую вместо `empty()` нужно городить трехэтажные проверки -->
        <UnresolvableInclude errorLevel="suppress" /> <!-- Передача имени файла для загрузки ввиде переменной, это не баг, а фича) -->
        <UnsafeInstantiation errorLevel="suppress" /> <!-- Тут кто догадывается полностью менять аргументы конструктора, сам дурак) -->
    </issueHandlers>
</psalm>
