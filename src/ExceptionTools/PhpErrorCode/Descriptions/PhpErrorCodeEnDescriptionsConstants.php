<?php declare(strict_types=1);

/*
 * This file is part of PhpTools - https://github.com/dracul-aid/PhpTools
 *
 * (c) Konstantin Marataev <dracul.aid@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace DraculAid\PhpTools\ExceptionTools\PhpErrorCode\Descriptions;

/**
 * Класс с описанием констант PHP типов ошибок на английском языке
 *
 * См также {@see PhpErrorCodeRuDescriptionsConstants} - описание на русском языке
 *
 * Оглавление:
 * <br>- {@see PhpErrorCodeEnDescriptionsConstants::TITLES} Названия типов ошибок
 * <br>- {@see PhpErrorCodeEnDescriptionsConstants::DESCRIPTIONS} Краткое описание типов ошибок
 *
 * Test cases for class {@see PhpErrorCodeDescriptionsConstantsTest}
 */
final class PhpErrorCodeEnDescriptionsConstants
{
    /** Названия типов ошибок на английском языке (ключи - коды ошибок, см PHP константы E_***) */
    public const TITLES = [
        E_ERROR => 'Fatal run-time errors',
        E_WARNING => 'Run-time warnings',
        E_PARSE => 'Compile-time parse errors',
        E_NOTICE => 'Run-time notices',
        E_CORE_ERROR => 'Fatal errors that occur during PHP\'s initial startup',
        E_CORE_WARNING => 'Warnings (non-fatal errors) that occur during PHP\'s initial startup',
        E_COMPILE_ERROR => 'Fatal compile-time errors',
        E_COMPILE_WARNING => 'Compile-time warnings (non-fatal errors)',
        E_USER_ERROR => 'User-generated error message',
        E_USER_WARNING => 'User-generated warning message',
        E_USER_NOTICE => 'User-generated notices message',
        E_STRICT => 'Strict',
        E_RECOVERABLE_ERROR => 'Catchable fatal error',
        E_DEPRECATED => 'Run-time notices about deprecated code',
        E_USER_DEPRECATED => 'Run-time notices about user\'s deprecated code',
    ];

    /** Краткое описание типов ошибок на английском языке (ключи - коды ошибок, см PHP константы E_***) */
    public const DESCRIPTIONS = [
        E_ERROR => 'These indicate errors that can not be recovered from, such as a memory allocation problem',
        E_WARNING => 'Run-time warnings (non-fatal errors)',
        E_PARSE => 'Parse errors should only be generated by the parser',
        E_NOTICE => 'Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.',
        E_CORE_ERROR => 'This is like an E_ERROR, except it is generated by the core of PHP',
        E_CORE_WARNING => 'This is like an E_WARNING, except it is generated by the core of PHP',
        E_COMPILE_ERROR => 'This is like an E_ERROR, except it is generated by the Zend Scripting Engine',
        E_COMPILE_WARNING => 'This is like an E_WARNING, except it is generated by the Zend Scripting Engine',
        E_USER_ERROR => 'This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error()',
        E_USER_WARNING => 'This is like an E_WARNING except it is generated in PHP code by using the PHP function trigger_error()',
        E_USER_NOTICE => 'This is like an E_NOTICE except it is generated in PHP code by using the PHP function trigger_error()',
        E_STRICT => 'Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code',
        E_RECOVERABLE_ERROR => '. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR',
        E_DEPRECATED => 'Enable this to receive warnings about code that will not work in future versions.',
        E_USER_DEPRECATED => 'ser-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().',
    ];
}
