<?php declare(strict_types=1);

/*
 * This file is part of PhpTools - https://github.com/dracul-aid/PhpTools
 *
 * (c) Konstantin Marataev <dracul.aid@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace DraculAid\PhpTools\Strings;

/**
 * Функции транслитерации
 *
 * Оглавление
 * <br>{@see TranslitConverter::RU_TO_EN_LIST} Таблица транслитерации
 * <br>{@see TranslitConverter::toTranslit()} Преобразует строку в транслит
 * <br>{@see TranslitConverter::toUrl()} Преобразует строку, в строку пригодную для использования в качестве части URL/URI
 */
final class TranslitConverter
{
    /**
     * Таблица транслитерации. Соответствия символов кириллицы и латиницы
     * (ключ - символ кириллицы или иной символ, значение символ в латинице)
    */
    public const RU_TO_EN_LIST = [

        // русские символы (кириллические символы)
        'а' => 'a', 'А' => 'A', 'б' => 'b', 'Б' => 'B', 'в' => 'v', 'В' => 'V', 'г' => 'g', 'Г' => 'G', 'д' => 'd',
        'Д' => 'D', 'е' => 'e', 'Е' => 'E', 'ё' => 'e', 'Ё' => 'E', 'ж' => 'zh', 'Ж' => 'ZH', 'з' => 'z', 'З' => 'Z',
        'и' => 'i', 'И' => 'I', 'й' => 'j', 'Й' => 'J', 'к' => 'k', 'К' => 'K', 'л' => 'l', 'Л' => 'L', 'м' => 'm',
        'М' => 'M', 'н' => 'n', 'Н' => 'N', 'о' => 'o', 'О' => 'O', 'п' => 'p', 'П' => 'P', 'р' => 'r', 'Р' => 'R',
        'с' => 's', 'С' => 'S', 'т' => 't', 'Т' => 'T', 'у' => 'u', 'У' => 'U', 'ф' => 'f', 'Ф' => 'F', 'х' => 'h',
        'Х' => 'H', 'ц' => 'c', 'Ц' => 'C', 'ч' => 'ch', 'Ч' => 'CH', 'ш' => 'sh', 'Ш' => 'SH', 'щ' => 'sch',
        'Щ' => 'SCH','ъ' => '', 'Ъ' => '', 'ы' => 'y', 'Ы' => 'Y', 'ь' => '', 'Ь' => '', 'э' => 'e', 'Э' => 'E',
        'ю' => 'ju', 'Ю' => 'JU', 'я' => 'ja', 'Я' => 'JA',

        // особые символы латиницы
        'á' => 'a', 'Á' => 'A', 'à' => 'a', 'À' => 'A', 'ă' => 'a', 'Ă' => 'A', 'â' => 'a', 'Â' => 'A', 'å' => 'a',
        'Å' => 'A', 'ã' => 'a', 'Ã' => 'A', 'ą' => 'a', 'Ą' => 'A', 'ā' => 'a', 'Ā' => 'A', 'ä' => 'ae', 'Ä' => 'AE',
        'æ' => 'ae', 'Æ' => 'AE', 'ḃ' => 'b', 'Ḃ' => 'B', 'ć' => 'c', 'Ć' => 'C', 'ĉ' => 'c', 'Ĉ' => 'C', 'č' => 'c',
        'Č' => 'C', 'ċ' => 'c', 'Ċ' => 'C', 'ç' => 'c', 'Ç' => 'C', 'ď' => 'd', 'Ď' => 'D', 'ḋ' => 'd', 'Ḋ' => 'D',
        'đ' => 'd', 'Đ' => 'D', 'ð' => 'dh', 'Ð' => 'Dh', 'é' => 'e', 'É' => 'E', 'è' => 'e', 'È' => 'E', 'ĕ' => 'e',
        'Ĕ' => 'E', 'ê' => 'e', 'Ê' => 'E', 'ě' => 'e', 'Ě' => 'E', 'ë' => 'e', 'Ë' => 'E', 'ė' => 'e', 'Ė' => 'E',
        'ę' => 'e', 'Ę' => 'E', 'ē' => 'e', 'Ē' => 'E', 'ḟ' => 'f', 'Ḟ' => 'F', 'ƒ' => 'f', 'Ƒ' => 'F', 'ğ' => 'g',
        'Ğ' => 'G', 'ĝ' => 'g', 'Ĝ' => 'G', 'ġ' => 'g', 'Ġ' => 'G', 'ģ' => 'g', 'Ģ' => 'G', 'ĥ' => 'h', 'Ĥ' => 'H',
        'ħ' => 'h', 'Ħ' => 'H', 'í' => 'i', 'Í' => 'I', 'ì' => 'i', 'Ì' => 'I', 'î' => 'i', 'Î' => 'I', 'ï' => 'i',
        'Ï' => 'I', 'ĩ' => 'i', 'Ĩ' => 'I', 'į' => 'i', 'Į' => 'I', 'ī' => 'i', 'Ī' => 'I', 'ĵ' => 'j', 'Ĵ' => 'J',
        'ķ' => 'k', 'Ķ' => 'K', 'ĺ' => 'l', 'Ĺ' => 'L', 'ľ' => 'l', 'Ľ' => 'L', 'ļ' => 'l', 'Ļ' => 'L', 'ł' => 'l',
        'Ł' => 'L', 'ṁ' => 'm', 'Ṁ' => 'M', 'ń' => 'n', 'Ń' => 'N', 'ň' => 'n', 'Ň' => 'N', 'ñ' => 'n', 'Ñ' => 'N',
        'ņ' => 'n', 'Ņ' => 'N', 'ó' => 'o', 'Ó' => 'O', 'ò' => 'o', 'Ò' => 'O', 'ô' => 'o', 'Ô' => 'O', 'ő' => 'o',
        'Ő' => 'O', 'õ' => 'o', 'Õ' => 'O', 'ø' => 'oe', 'Ø' => 'OE', 'ō' => 'o', 'Ō' => 'O', 'ơ' => 'o', 'Ơ' => 'O',
        'ö' => 'oe', 'Ö' => 'OE', 'ṗ' => 'p', 'Ṗ' => 'P', 'ŕ' => 'r', 'Ŕ' => 'R', 'ř' => 'r', 'Ř' => 'R', 'ŗ' => 'r',
        'Ŗ' => 'R', 'ś' => 's', 'Ś' => 'S', 'ŝ' => 's', 'Ŝ' => 'S', 'š' => 's', 'Š' => 'S', 'ṡ' => 's', 'Ṡ' => 'S',
        'ş' => 's', 'Ş' => 'S', 'ș' => 's', 'Ș' => 'S', 'ß' => 'SS', 'ť' => 't', 'Ť' => 'T', 'ṫ' => 't', 'Ṫ' => 'T',
        'ţ' => 't', 'Ţ' => 'T', 'ț' => 't', 'Ț' => 'T', 'ŧ' => 't', 'Ŧ' => 'T', 'ú' => 'u', 'Ú' => 'U', 'ù' => 'u',
        'Ù' => 'U', 'ŭ' => 'u', 'Ŭ' => 'U', 'û' => 'u', 'Û' => 'U', 'ů' => 'u', 'Ů' => 'U', 'ű' => 'u', 'Ű' => 'U',
        'ũ' => 'u', 'Ũ' => 'U', 'ų' => 'u', 'Ų' => 'U', 'ū' => 'u', 'Ū' => 'U', 'ư' => 'u', 'Ư' => 'U', 'ü' => 'ue',
        'Ü' => 'UE', 'ẃ' => 'w', 'Ẃ' => 'W', 'ẁ' => 'w', 'Ẁ' => 'W', 'ŵ' => 'w', 'Ŵ' => 'W', 'ẅ' => 'w', 'Ẅ' => 'W',
        'ý' => 'y', 'Ý' => 'Y', 'ỳ' => 'y', 'Ỳ' => 'Y', 'ŷ' => 'y', 'Ŷ' => 'Y', 'ÿ' => 'y', 'Ÿ' => 'Y', 'ź' => 'z',
        'Ź' => 'Z', 'ž' => 'z', 'Ž' => 'Z', 'ż' => 'z', 'Ż' => 'Z', 'þ' => 'th', 'Þ' => 'Th', 'µ' => 'u'
    ];

    /**
     * Преобразует строку в транслит, будет пытаться использовать PHP расширение Intl ({@see \Transliterator}), если
     * не найдет его, будет использовать таблицу транслитерации {@see TranslitConverter::RU_TO_EN_LIST}
     *
     * @param   string   $string
     *
     * @return  string
     *
     * @todo Требует теста
     */
    public static function toTranslit(string $string): string
    {
        /**
         * @var bool|\Transliterator $transliterator Для хранения транслитиратора
         *                                           (TRUE транслитиратор еще не определен, FALSE - определение транслитератора провалилось)
         */
        static $transliterator = true;

        // Если модуль PHP Intl подключен, то будем использовать для траснлитирации его - http://php.net/manual/ru/class.transliterator.php
        // Если транслитиратор еще не создан - создадим его
        if ($transliterator === true && extension_loaded('Intl'))
        {
            // ID транслитиратора
            // получить список существующих в системе ID транслитираторов можно с помощью Transliterator::listIDs()
            $transliteratorId = "Any-Latin";

            // создание транслитиратора
            $transliterator = \Transliterator::create($transliteratorId);

            // При провале создания транслитератора. Получить описание ошибки можно с помощью $transliterator->getErrorMessage()
            if ($transliterator->getErrorMessage() !== 'U_ZERO_ERROR')
            {
                $transliterator = false;
            }
        }

        // если транслитиратор есть - будем использовать его
        if (empty($transliterator)) return $transliterator->transliterate($string);
        else return strtr($string, self::RU_TO_EN_LIST);
    }

    /**
     * Преобразует строку, в строку пригодную для использования в качестве части URL/URI
     *
     * @param   string   $string
     *
     * @return string
     */
    public static function toUrl(string $string): string
    {
        // Транслитирация и перевод в нижний регистр
        $_return = self::toTranslit(strtolower($string));

        // Все символы, кроме букв, цифр, знаков почеркивания и дефиса преобразуем в дефис (т.е. "-")
        $_return = preg_replace('/[^a-zA-Z0-9_-]/', '-', $_return);

        // Все повторяющиеся "-" и "_" преобразуются в единичные "-" и "_" (т.е. "bla-bla--lalaa" будет преобразовано в "bla-bla-lalaa")
        $_return = preg_replace('~(-|_)\1+~i', '\\1', $_return);

        // удаляем первые и последние символы "-" и "_"
        return trim($_return, '-,_');
    }
}
